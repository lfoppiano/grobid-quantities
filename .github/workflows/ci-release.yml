name: Build release

on:
  workflow_dispatch:
  push:
    tags:
      - 'v*'

concurrency:
  group: docker
  cancel-in-progress: true


jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4
    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17.0.10+7'
        distribution: 'temurin'
        cache: 'gradle'
    - name: Build with Gradle
      run: ./gradlew build -x test

    - name: Test with Gradle Jacoco and Coveralls
      run: ./gradlew test jacocoTestReport coveralls --no-daemon

    - name: Coveralls GitHub Action
      uses: coverallsapp/github-action@v2
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        format: jacoco
        
        
  docker-build:
    needs: [build]
    runs-on: ubuntu-latest

    steps:
      - name: Create more disk space
        run: sudo rm -rf /usr/share/dotnet && sudo rm -rf /opt/ghc && sudo rm -rf "/usr/local/share/boost" && sudo rm -rf "$AGENT_TOOLSDIRECTORY"
      - name: Set tags
        id: set_tags
        run: |
          DOCKER_IMAGE=lfoppiano/grobid-quantities
          VERSION=""
          if [[ $GITHUB_REF == refs/tags/v* ]]; then
            VERSION=${GITHUB_REF#refs/tags/v}
          fi
          if [[ $VERSION =~ ^[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}$ ]]; then
            TAGS="${VERSION}"
          else
            TAGS="latest"
          fi
          echo "TAGS=${TAGS}"
          echo ::set-output name=tags::${TAGS}
      - uses: actions/checkout@v4
      - name: Build and push
        id: docker_build
        uses: mr-smithers-excellent/docker-build-push@v5
        with:
          dockerfile: Dockerfile.local
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
          image: lfoppiano/grobid-quantities
          registry: docker.io
          pushImage: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.set_tags.outputs.tags }}
      #          buildArgs: "GROBID_VERSION=${VERSION}"
      - name: Image digest
        run: echo ${{ steps.docker_build.outputs.digest }}  
