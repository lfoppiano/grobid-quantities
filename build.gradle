import org.apache.tools.ant.taskdefs.condition.Os

buildscript {
    repositories {
        mavenLocal()
        mavenCentral()
        maven {
            url "https://plugins.gradle.org/m2/"
        }
    }
    dependencies {
        classpath group: 'org.yaml', name: 'snakeyaml', version: '1.19'
    }
}

plugins {
    id 'java'
    id 'application'
    id 'maven-publish'
    id 'jacoco'
    id 'com.github.kt3k.coveralls' version '2.12.2'
    id 'com.github.johnrengelman.shadow' version '7.0.0'
    id "de.undercouch.download" version "4.1.1"
    id 'com.palantir.git-version' version '0.12.3'
    id 'net.researchgate.release' version '3.0.2'
    id "org.jetbrains.kotlin.jvm" version "1.8.21"
}

group = "org.grobid"

description = """The goal of this GROBID module is to recognize in textual documents any expressions of 
measurements (e.g. pressure, temperature, etc.), to parse and normalization them, and finally to convert 
these measurements into SI units. We focus our work on technical and scientific articles (text, XML and PDF input) 
and patents (text and XML input)."""

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8'
    //    options.compilerArgs << "-Xlint:deprecation"
    //    options.compilerArgs << "-Xlint:unchecked"
}

compileKotlin {
    kotlinOptions {
        jvmTarget = "17"
    }
}
compileTestKotlin {
    kotlinOptions {
        jvmTarget = "17"
    }
}


tasks.run.workingDir = rootProject.rootDir

ext {
    // treating them separately, these jars will be flattened into grobid-core.jar on installing,
    // to avoid missing dependencies from the projects that include grobid-core (see 'jar' taskin grobid-core)
    localLibs = []
}

repositories {
    mavenLocal()
    mavenCentral()
    maven { url 'https://jitpack.io' }
    maven { url "https://oss.jfrog.org/artifactory/libs-snapshot" }
    maven { url "https://oss.jfrog.org/artifactory/libs-release" }
    flatDir {
        dirs 'localLibs'
    }
}



dependencies {
    //Tests
    testImplementation 'org.junit.vintage:junit-vintage-engine:5.9.3'
    testImplementation(platform('org.junit:junit-bom:5.9.3'))
    testImplementation('org.junit.jupiter:junit-jupiter')
    testImplementation 'org.easymock:easymock:5.1.0'
    testImplementation 'org.hamcrest:hamcrest-all:1.3'
    testImplementation 'org.powermock:powermock-module-junit4:2.0.9'
    testImplementation 'org.powermock:powermock-api-easymock:2.0.9'
    testImplementation 'org.jetbrains.kotlin:kotlin-test'

    //GROBID
    implementation 'org.grobid:grobid-core:0.7.3'
    implementation 'org.grobid:grobid-trainer:0.7.3'
    implementation 'org.grobid:grobid-service:0.7.3'
    implementation "xerces:xercesImpl:2.12.0"
    implementation "net.arnx:jsonic:1.3.10"
    implementation "net.sf.saxon:Saxon-HE:9.6.0-9"
    implementation "xom:xom:1.3.2"
    implementation 'javax.xml.bind:jaxb-api:2.3.0'
    implementation 'org.apache.opennlp:opennlp-tools:1.9.1'
    implementation 'black.ninia:jep:4.0.2'
    implementation "org.apache.lucene:lucene-analyzers-common:4.5.1"

    //Apache commons
    implementation 'org.apache.commons:commons-collections4:4.4'
    implementation 'org.apache.commons:commons-lang3:3.12.0'
    implementation 'commons-logging:commons-logging:1.2'
    implementation 'commons-io:commons-io:2.11.0'
    implementation 'commons-pool:commons-pool:1.6'

    //Json
    implementation 'com.fasterxml.jackson.core:jackson-core:2.13.3'
    implementation 'com.fasterxml.jackson.core:jackson-databind:2.13.3'
    implementation 'com.fasterxml.jackson.module:jackson-module-afterburner:2.13.3'
    implementation 'com.fasterxml.jackson.dataformat:jackson-dataformat-yaml:2.13.3'

    // measurements

    // (1) UOM 2.x
    implementation 'tech.units:indriya:2.1.3'
    implementation group: 'si.uom', name: 'si-units', version: '2.1'
    implementation group: 'si.uom', name: 'si-quantity', version: '2.1'
    implementation group: 'systems.uom', name: 'systems-quantity', version: '2.1'
    implementation group: 'systems.uom', name: 'systems-common', version: '2.1'
    implementation group: 'systems.uom', name: 'systems-unicode', version: '2.1'
    implementation group: 'systems.uom', name: 'systems-ucum', version: '2.1'
    implementation group: 'systems.uom', name: 'systems-unicode', version: '2.1'

    //Dropwizard
    implementation "com.hubspot.dropwizard:dropwizard-guicier:1.3.5.2"
    implementation "io.dropwizard:dropwizard-core:1.3.29"
    implementation "io.dropwizard:dropwizard-assets:1.3.29"
    implementation "io.dropwizard:dropwizard-testing:1.3.29"
    implementation "io.dropwizard:dropwizard-forms:1.3.29"
    implementation "io.dropwizard:dropwizard-client:1.3.29"
    implementation "io.dropwizard:dropwizard-auth:1.3.29"
    implementation "io.dropwizard.metrics:metrics-core:4.0.0"
    implementation "io.dropwizard.metrics:metrics-servlets:4.0.0"
    implementation 'javax.servlet:javax.servlet-api:3.1.0'

    //Misc
    implementation group: 'com.googlecode.clearnlp', name: 'clearnlp', version: '1.3.1'
    implementation 'com.google.guava:guava:30.1.1-jre'
    implementation "net.arnx:jsonic:1.3.10"

    // XML
    implementation 'org.codehaus.woodstox:stax2-api:4.2.1'
    implementation 'com.fasterxml.woodstox:woodstox-core:6.2.7'


    // Needed for compatibility with JDK > 8
    implementation 'javax.activation:activation:1.1.1'
}


configurations {
    implementation.exclude group: "org.slf4j", module: "slf4j-jdk14"
    implementation.exclude group: 'org.slf4j', module: "slf4j-log4j12"
    implementation.exclude group: 'log4j', module: "log4j"
}

configurations.configureEach {
    resolutionStrategy {
        force 'xml-apis:xml-apis:1.4.01'
    }
}

/** Other configuration **/

sourceSets.main.resources {
    srcDirs = ["src/main/resources", "resources/config"]
}
sourceSets.test.resources {
    srcDirs = ["src/test/resources"]
}

test {
    exclude '**/**IntegrationTest**'
    useJUnitPlatform()
    maxHeapSize = "1024m"

    def libraries = ""
    if (Os.isFamily(Os.FAMILY_MAC)) {
        if (Os.OS_ARCH.equals("aarch64")) {
            libraries = "${file("./grobid-home/lib/mac_arm-64").absolutePath}"
        } else {
            libraries = "${file("./grobid-home/lib/mac-64").absolutePath}"
        }
    } else if (Os.isFamily(Os.FAMILY_UNIX)) {
        def jepDir = rootProject.rootDir.getAbsolutePath() + "/grobid-home/lib/lin-64/jep"
        libraries = jepDir
        jepDir = rootProject.rootDir.getAbsolutePath() + "/grobid-home/lib/lin-64"
        libraries += ":" + jepDir
    } else {
        throw new RuntimeException("Unsupported platform!")
    }

    if (JavaVersion.current().compareTo(JavaVersion.VERSION_1_8 ) > 0) {
        jvmArgs "--add-opens", "java.base/java.util.stream=ALL-UNNAMED",
            "--add-opens", "java.base/java.io=ALL-UNNAMED",
            "--add-opens", "java.base/java.lang=ALL-UNNAMED",
            "--add-opens", "java.base/java.util.regex=ALL-UNNAMED",
            "--add-opens", "java.base/java.math=ALL-UNNAMED",
            "--add-opens", "java.base/java.text=ALL-UNNAMED"
    }
    systemProperty "java.library.path", "${System.getProperty('java.library.path')}:" + libraries
}

tasks.run.workingDir = rootProject.rootDir

mainClassName = 'org.grobid.service.GrobidSuperconductorsApplication'

run {
    args = ['server', 'resources/config/config.yml']

    def libraries = ""
    if (Os.isFamily(Os.FAMILY_MAC)) {
        if (Os.OS_ARCH.equals("aarch64")) {
            libraries = "${file("../grobid-home/lib/mac_arm-64").absolutePath}"
        } else {
            libraries = "${file("../grobid-home/lib/mac-64").absolutePath}"
        }
    } else if (Os.isFamily(Os.FAMILY_UNIX)) {
        libraries = "${file("../grobid-home/lib/lin-64/jep").absolutePath}:" +
            "${file("../grobid-home/lib/lin-64").absolutePath}:"
    } else {
        throw new RuntimeException("Unsupported platform!")
    }

    if (JavaVersion.current().compareTo(JavaVersion.VERSION_1_8) > 0) {
        jvmArgs "--add-opens", "java.base/java.lang=ALL-UNNAMED"
    }
    workingDir = rootProject.rootDir
    def javaLibraryPath = "${System.getProperty('java.library.path')}:" + libraries

    systemProperty "java.library.path", javaLibraryPath
}

task integration(type: Test) {
    include '**'

    maxHeapSize = "1024m"

    def libraries = ""
    if (Os.isFamily(Os.FAMILY_MAC)) {
        if (Os.OS_ARCH.equals("aarch64")) {
            libraries = "${file("./grobid-home/lib/mac_arm-64").absolutePath}"
        } else {
            libraries = "${file("./grobid-home/lib/mac-64").absolutePath}"
        }
    } else if (Os.isFamily(Os.FAMILY_UNIX)) {
        def jepDir = rootProject.rootDir.getAbsolutePath() + "/grobid-home/lib/lin-64/jep"
        libraries = jepDir
        jepDir = rootProject.rootDir.getAbsolutePath() + "/grobid-home/lib/lin-64"
        libraries += ":" + jepDir
    } else {
        throw new RuntimeException("Unsupported platform!")
    }

    if (JavaVersion.current().compareTo(JavaVersion.VERSION_1_8) > 0) {
//        jvmArgs "--add-opens", "java.base/java.util.stream=ALL-UNNAMED",
//            "--add-opens", "java.base/java.io=ALL-UNNAMED",
//            "--add-opens", "java.base/java.lang=ALL-UNNAMED",
//            "--add-opens", "java.base/java.util.regex=ALL-UNNAMED",
//            "--add-opens", "java.base/java.math=ALL-UNNAMED",
//            "--add-opens", "java.base/java.text=ALL-UNNAMED"
    }
    systemProperty "java.library.path", "${System.getProperty('java.library.path')}:" + libraries
}

// Training configuration

def trainerTasks = [
    //Training models
    "train_units"            : "org.grobid.trainer.UnitTrainer",
    "train_quantities"       : "org.grobid.trainer.QuantitiesTrainer",
    "train_values"           : "org.grobid.trainer.ValueTrainer",
    "train_quantifiedObjects": "org.grobid.trainer.QuantifiedObjectTrainer"
]


trainerTasks.each { taskName, mainClassName ->
    tasks.create(name: taskName, type: JavaExec, group: 'training') {
        main = mainClassName
        classpath = sourceSets.main.runtimeClasspath
    }
}

processResources {
    filesMatching('version.txt') {
        filter {
            it.replace('project.version', project.property('version'))
        }
    }
}

// return the default value if the property has not been specified in command line
ext.getArg = { propName, defaultVal ->
    return project.hasProperty(propName) ? project.getProperty(propName) : defaultVal;
}

processResources {
    filesMatching(["version.txt", "revision.txt"]) {
        expand(project_version: project.property('version'),
            project_revision: gitVersion())
    }
}

/*** Packaging and distribution ***/

shadowJar {
    mainClassName = 'org.grobid.service.main.GrobidQuantitiesApplication'
    archiveClassifier = 'onejar'
    mergeServiceFiles()
    zip64 true
    manifest {
        attributes 'Main-Class': mainClassName
    }
    from sourceSets.main.output
    configurations = [project.configurations.runtimeClasspath]
}

jar {
    enabled true
}

artifacts {
    archives shadowJar
}

distZip.enabled = true
distTar.enabled = false
shadowDistZip.enabled = false
shadowDistTar.enabled = false

publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java
        }
    }
    repositories {
        mavenLocal()
    }
}

def conf = new org.yaml.snakeyaml.Yaml().load(new File("resources/config/config.yml").newInputStream())
def grobidHome = conf.grobidHome.replace("\$", "").replace('{', "").replace("GROBID_HOME:- ", "").replace("}", "")

/** Model management **/

task copyModels(type: Copy) {
    from "${rootDir}/resources/models"
    include "**/*.wapiti"
    include "**/config.json"
    include "**/transformer-config.json"
    include "**/transformer-tokenizer/**"
    include "**/model_weights.hdf5"
    include "**/preprocessor.json"
    exclude "**/features-engineering/**"
    exclude "**/result-logs/**"
    into "${rootDir}/${grobidHome}/models/"

    doLast {
        print "Copy models under grobid-home: ${grobidHome}"
    }
}

task downloadTransformers(dependsOn: copyModels) {
    doLast {
        download {
            src "https://transformers-data.s3.eu-central-1.amazonaws.com/quantities-transformers.zip"
            dest "${rootDir}/${grobidHome}/models/quantities-transformers.zip"
            overwrite false
            print "Download bulky transformers files under grobid-home: ${grobidHome}"
        }
        ant.unzip(src: "${rootDir}/${grobidHome}/models/quantities-transformers.zip", dest: "${rootDir}/${grobidHome}/models/")
    }
}

wrapper {
    gradleVersion "7.2"
}

jacocoTestReport {
    reports {
        xml.enabled = true // coveralls plugin depends on xml format report
        html.enabled = true
    }
    dependsOn test // tests are required to run before generating the report
}

coveralls {
    jacocoReportPath 'build/reports/jacoco/test/jacocoTestReport.xml'
}

release {
    failOnUnversionedFiles = false
    failOnCommitNeeded = false
    tagTemplate = 'v${version}'
    git {
        requireBranch.set('test')
    }
}