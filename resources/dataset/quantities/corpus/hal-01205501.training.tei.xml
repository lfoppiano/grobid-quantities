<tei xmlns="http://www.tei-c.org/ns/1.0">
	<teiHeader>
		<fileDesc xml:id="_1" />
		<encodingDesc>
			<appInfo>
				<application version="0.4.5-dummy" ident="GROBID" when="2017-08-22T14:33+0000">
					<ref target="https://github.com/kermitt2/grobid">A machine learning software for extracting information from scholarly documents</ref>
				</application>
			</appInfo>
		</encodingDesc>
	</teiHeader>
	<text xml:lang="en">
		<p>Whole-body control in unknown environments is challenging: Unforeseen contacts with obstacles can lead to poor tracking performance and potential physical damages of the robot. Hence, a whole-body control approach for future humanoid robots in (partially) unknown environments needs to take contact sensing into account, e.g., by means of artificial skin. However, translating contacts from skin measurements into physically well-understood quantities can be problematic as the exact position and strength of the contact needs to be converted into torques. In this paper, we suggest an alternative approach that directly learns the mapping from both skin and the joint state to torques. We propose to learn such an inverse dynamics models with contacts using a mixture-of-contacts approach that exploits the linear superimposition of contact forces. The learned model can, making use of uncalibrated tactile sensors, accurately predict the torques needed to compensate for the contact. As a result, tracking of trajectories with obstacles and tactile contact can be executed more accurately. We demonstrate on the humanoid robot iCub that our approach improve the tracking error in presence of dynamic contacts.</p>
		<p>A key challenge for torque-controlled humanoid robots is to accurately control their dynamics and the contacts with the environment, for example during manipulation in clutter <!--[1]-->, locomotion <!--[2]--> and whole-body movements <!--[3]-->. In such complex situations, the dynamics of the system can be exploited to compute the required joint torques necessary to realize the desired trajectories of the joints. This is the idea at the base of computed torque control <!--[4]-->, also used in inverse dynamics control <!--[5]--> and model predictive control applied to robot reaching and locomotion <!--[6], [7]-->.</p>
		<p>Inaccurate joint torques estimation can deteriorate the performances of computed torque control and tracking of desired trajectories, which can ultimately cause severe problems when controlling the robot motion in presence of uncertainties, disturbances and unexpected contacts with the environment. However, accurate estimation of joint torques and external forces in presence of contacts is difficult without dedicated sensors.</p>
		<p>The research leading to these results has received funding from the European Council under grant agreement #600716 (CoDyCo-FP7/2007. MPD was supported by an Imperial College Junior Research Fellowship.</p>
		<p>1 Intelligent Autonomous Systems, TU Darmstadt, Germany calandra@ias.tu-darmstadt.de 2 Inria, Villers-l` es-Nancy, F-, France; CNRS, Loria, UMR n.7503 and Université de Lorraine, Vandoeuvre-l` es-Nancy, F-<measure type="list"><num>54600</num><num>54500</num></measure>, France serena.ivaldi@inria.fr Its movement is obstructed by an unexpected obstacle, which decreases the tracking performance of a desired trajectory. We reduce the tracking error by learning the torque control to compensate the contact. This is also true for robots equipped with whole-body distributed tactile sensing, as small errors in the estimation of the contact location can substantially deteriorate the quality of the inverse dynamics estimation <!--[8]-->.</p>
		<p><measure type="value"><num>Two</num></measure> main lines of research are currently addressing this issue. On one side modelbased approaches, which rely on identification techniques to improve the dynamics parameters of the analytic models <!--[9], [10]-->. On the other side, we have machine learning approaches, where nonparametric models of the robot dynamics can be learned from data collected on the robot <!--[11], [12], [13]-->. The main advantages of the latter approaches are that they do not usually require a prior calibration (kinematics/dynamics calibration <!--[14]--> or spatial calibration of the tactile sensors <!--[15]-->), are less prone to model errors, and can easily deal with noise and varying contexts <!--[11]-->.</p>
		<p>In previous work <!--[12]-->, we proposed a data-driven mixtureof-experts learning approach based on Gaussian Processes, which predicts joint torques from joint encoders, tactile and force/torque sensors data. We applied such a model to learn the joint torques of the arm of iCub in presence of several varying contacts, showing that the learned model was more accurate than analytic dynamics models using the same sensors data <!--[16]-->. However, the proposed learning approach required the availability of joint torque sensors to supervise the learning process and provide the ground truth; Therefore limiting the application of this approach in many robots, in particular to almost all iCubs <!-- 1 --> .</p>
		<p>In this paper, we generalize the previous approach, re-laxing the need for joint torque sensors on the robot. Most importantly, we demonstrate in an active control task with the humanoid robot iCub (see Figure 1) the effectiveness of the proposed model, by showing that it can be efficiently used for computed torque control in presence of contacts with the environment. With the learned model we can decrease the tracking error in presence of known or novel contacts.</p>
		<p>To the best of our knowledge, this is the first demonstration of controlling a humanoid robot with a learned torque model using tactile and force/torque sensing in presence of dynamic contacts.</p>
		<p>Without contacts with the environment, the inverse dynamics (ID) of a robot with m degrees of freedom can be generally described by</p>
		<p>where q ∈ R m , ˙ q ∈ R m and¨qand¨ and¨q ∈ R m are the joint positions, velocities and accelerations, respectively, M (q) ∈ R m×m is the inertia matrix. h (q, ˙ q) ∈ R m×m is the matrix combining the contributions from Coriolis and centripetal, friction (viscous and static) and gravity forces:</p>
		<p>The term (q, ˙ q, ¨ q) captures the errors of the model, such as unmodeled dynamics (e.g., elasticities and Stribeck friction), inaccuracies in the dynamic parameters (e.g., masses, inertia), vibrations, couplings and sensor noise.</p>
		<p>In presence of a set of contacts C = {c 1. .. c n } between the robot and the environment, Equation (1) becomes</p>
		<p>by including τ CM to accounts for the effect of the external wrenches (forces and moments) γ i applied at the contact location c i , and J ci (q) is the contact Jacobian <!-- 2 --> .</p>
		<p>The joint torques τ RBD can be computed analytically through the rigid body dynamics model of the robot, a standard parametric description of the robot <!--[17]-->, with known or identified kinematics and dynamics parameters <!--[9], [10]-->. A method to estimate joint torques and external forces integrating force/torque and tactile measurements was proposed in <!--[16]-->. The term (q, ˙ q, ¨ q) is often neglected, or modeled and estimated, or implicitly taken into account by considering a perturbation in the dynamics parameters of τ RBD . <!-- 2 --> The contact location c i is not necessarily fixed, as the contacts may occur on the whole robotic structure and not exclusively at the end-effectors. If the contact location is not known a priori, it must be estimated, typically, through distributed tactile sensors. To compute the contact Jacobian Jc i (q), we need the position of the contact point with respect to the reference frame of the link, which requires a kinematic/spatial calibration of the skin <!--[15]-->. As discussed in <!--[12]-->, model-based approaches for computing the inverse dynamics have some limitations: for example, the required prior calibration of the robot, the difficulty in modeling accurately complex nonlinear dynamics and in generating suitable exciting trajectories for the parameters identification. By contrast, machine learning methods offer an alternative, data-driven approach for learning a robot dynamics model, without the need to describe it with complex parametric models <!--[18], [19], [20]-->. Relying on collected robot data, learning the robot dynamics can be performed offline <!--[12]--> or incrementally and online <!--[11]-->. Without the need for compensating inaccurate dynamics parameters and accumulated errors, a learned dynamics model can improve the tracking and control performance of a robot, as shown in <!--[18]--> for an industrial manipulator. In this paper, we make a step forward and show that learning the robot dynamics can also improve tracking and control performances of a humanoid arm in presence of contacts.</p>
		<p>In this section, we describe our approach for learning ID models with contacts. We first formalize the problem as learning a mixture-of-experts model. Then we detail how to implement Gaussian processes as the corresponding experts.</p>
		<p>When learning the inverse dynamics with contacts (Equation (3)), we assume that the (contact-free) inverse dynamics τ ID can be computed precisely, either from an analytic model or from a learned model <!--[18]-->. As a result, only the model of the additional term of the contact forces τ CM has to be learned. In this paper, we consider a robot that is provided with skin measurements s from the tactile sensors, force measurements F from the force torque sensors (FTS). A visual representation of these relevant components is shown in Figure 2. Predicting the contact forces τ CM can be formalized as the regression task</p>
		<p>where</p>
		<p>the inputs. Additionally, is an i.i.d. Gaussian measurement noise with mean <measure type="value"><num>0</num></measure> and variance σ 2 n. Therefore, our regression problem becomes</p>
		<p>It is necessary to consider the skin s as an input since contacts with different parts of the body lead to different effects in the dynamics. Intuitively, s is required to identify the position of the contact. The force/torque measurements F could be avoided if we were interested in learning contacts that do not change between training and test time, which would restrict us to static objects, such as a rigid floor, walls or stationary obstacles. However, as this assumption is limiting in our context, we include the force/torque measurements F in our model. The resulting regression of Equation (5) is challenging due to the high dimensionality of the input x ∈ X (the skin measurements s alone account for <measure type="value"><num>hundreds</num></measure> of dimensions) and nonlinearity. Observing that the contact forces term τ CM is a sum over multiple contacts, we can tackle this challenging regression by decomposing the τ CM into a sum of multiple regression problems, where each regression problem is a single contact. Since each contact is uniquely defined by its position, we can make contact torque contribution of each single contact model independent of the skin, and use the skin only to decide which contact model is currently active. As a result, we can rephrase the regression of Equation (5) as the learning of the mixture-of-experts model ("mixture of contacts" in our case)</p>
		<p>where J is the set of active experts f j identified by the gating network. The purpose of the gating network is to select the experts that are currently active, based on the skin input s, and to add their contributions. An illustration of this approach is shown in Figure 3. Note that in Equation 6 the skin input s is no longer explicitly part of the inputs of the experts, since it is now only used in the gating network. Hence, each single expert f j is now sufficiently low-dimensional to be modeled independently, but at the same time the possibility of summing the contribution of each contact allows to account for complex behaviors. For expert f j we use Gaussian</p>
		<p>information regarding GP models and their training are given in the next subsection. The gating network can be considered as a classifier J = g(q, s, F ) that selects which contact is currently active. For simple tasks, this gating network can be designed using heuristics (e.g., using thresholds on the activation of the tactile sensors). Alternatively, for more complex systems an approach based on machine learning is more suitable (e.g., by learning a classifier using support vector machine). Another important issue is chosing the number of contact models to use. Generally, the more contact models the better, as each one would specialize in its own particular contact class (i.e., contacts that results is similar effects on</p>
		<p>Gaussian Processes <!--[21]--> are a state-of-the-art regression method. They have been used in robotics to learn dynamics models <!--[20]--> and for control <!--[22]-->. In the context of this paper, a GP is a distribution over inverse dynamics models</p>
		<p>fully defined by a prior mean m f and a covariance function k f. When learn the contact models τ CM , we choose as prior mean m f ≡ τ ID and as covariance function k f the squared exponential with automatic relevance determination and Gaussian noise:</p>
		<p>where</p>
		<p>) and δ pq is the Kronecker delta (which is one if p = q and <measure type="value"><num>zero</num></measure> otherwise). Here, l i are the characteristic length-scales, σ 2 f is the variance of the latent function f (·) and σ 2 w the noise variance. In our experiments, when learning contact models, the input is defined as X = [q, F ] and the output (observations) is y = τ are the torques. Hence, given n training inputs X = [x 1 , ..., x n ] and corresponding training targets y = [y 1 , ..., y n ], we define the training data set D = {X, y}. Training the GP corresponds to finding good hyperparameters θ = [l i , σ f , σ w ], which can be done by the standard procedure of maximizing the marginal likelihood <!--[21]-->.</p>
		<p>The GP yields the predictive distribution over torques for a new input</p>
		<p>where the mean µ(x * ) and the variance σ 2 (x * ) are</p>
		<p>The entries of the matrix K are K ij = k(x i , x j ), and we define k * * = k(x * , x * ) and k * = k(X, x * ).</p>
		<p>In absence of contacts C = {0}, and with a perfect model, we can define the task-space nonlinear feedforward control:</p>
		<p>where the u are the torques given as motor command and τ ID are the torques computed from the inverse dynamics (or a learned model of it). To compensate for any noise or inaccuracies in the feed-forward dynamics, an additional feedback controller (impedance controller or PD controller) is added, such that</p>
		<p>Intuitively, the magnitude of the control signals contributed from the PD controller τ PD can be used to measure the goodness of the inverse dynamics model. Accurate inverse dynamics models will only need small corrections by the feedback controller during tracking of a desired trajectory, while inaccurate models will rely more heavily on it. In case of inaccurate models increasing the PD gains can still lead to acceptable tracking performance, but often at the expense of safety and compliance.</p>
		<p>In case of contacts, we can further extend the controller of Equation (12) to become</p>
		<p>where τ CM is the contribution from the contacts (see Equation (3)), which is estimated using the learned model from Equation (6). In the experimental evaluations presented in the next section we will compare the performance of all these <measure type="value"><num>three</num></measure> control schema. τ PD drastically decrease when using the learned ID, therefore suggesting that the learned ID model is accurate.</p>
		<p>In this section we present the experimental results obtained from a tracking task in the presence of contacts. First we demonstrate that an accurate (contact-free) ID model can be learned. This ID model will be used as base for comparing the tracking performance in presence of obstacles. Second we demonstrate that our proposed model can be used to compensate for an unknown obstacle and achieve better tracking performance. To conclude, we demonstrate the generalization capabilities of our learned model by testing it on a novel obstacle.</p>
		<p>The experimental evaluations are performed on the iCubDarmstadt01, the most recent version (v. 2.5) of iCub <!--[23]-->. The iCub has <measure type="value"><num>53</num> <measure type="TEMPERATURE" unit="°">degrees</measure></measure> of freedom and is <measure type="value"><num>104</num> <measure type="LENGTH" unit="cm">cm</measure></measure> tall for <measure type="value"><num>24</num> <measure type="MASS" unit="kg">kg</measure></measure> of weight. The robot is not equipped with joint torque sensors, but it has <measure type="value"><num>four</num></measure> <measure type="value"><num>6</num></measure>-axis force/torque sensors placed proximally in the middle of legs and arms, and an artificial skin consisting of more than <measure type="interval"><num atLeast="3000">3000</num></measure> tactile sensors, mounted on the robot covers <!--[24]-->. Each of these sensors provide a signal in the interval ∈ [<measure type="interval"><num atLeast="0">0</num>,<num atMost="255">255</num></measure>] correlated to the force applied orthogonally to the sensor. In our experiments, we control <measure type="value"><num>4</num></measure> DoF of the iCub arm: shoulder pitch, roll and jaw, and elbow. The skin input s from the forearm consists of <measure type="value"><num>384</num></measure> sensors. In the iCub the joint torques are not estimated by the motors currents, but via an analytic model with identified dynamics parameters <!--[9]-->, which updates the estimation thanks to the inertial, tactile and force/torque measurements <!--[16]-->. We compute, on a PC outside the robot, the desired joint torques at the frequency of <measure type="value"><num>50</num> <measure type="FREQUENCY" unit="Hz">Hz</measure></measure> and then send the commands to the robot interface Yarp. A low-level controller implemented on the motor boards takes care of tracking the desired joint torques, sent through the robot interface. Both the estimation of the joint torques and the low-lever controller are transparent to our learned model as we use the desired torques (instead of the measured torques) as targets y during the training of the models.</p>
		<p>Before learning the contact models, a pre-requisite of our approach is the existence of a (contact-free) rigid-body inverse dynamics model. In our case, we decided to learn such ID model from scratch using Gaussian Processes. The reason for this choice are the unmodeled dynamics (q, ˙ q, ¨ q), which introduce substantial errors even in absence of contacts. In this subsection we present an experimental validation of the learned (contact-free) inverse dynamics. To validate the learned ID model we firstly compared the tracking error, in absence of obstacles. The task used for the experimental validation of the proposed approach consists of a tracking task with the left arm of the iCub where each of the <measure type="value"><num>four</num></measure> joints of the arm should follow a pre-designed trajectory. In Table I we collected the tracking errors obtained averaging over <measure type="value"><num>20</num></measure> repetitions. The results shows that the learned ID model reduces the tracking error, compared to the simple PD controller. The visualization of Figure 4 shows the average error tracking for the shoulder jaw. As second comparison we analyzed the contribution to the desired torque from the PD controller τ PD. In Figure 5 it is visible that when using the learned ID model, τ PD is drastically reduced. Both experimental results suggests that the learned ID model is accurate and useful for the desired tracking task.</p>
		<p>For the validation of the inverse dynamics with contacts model we consider the same trajectory tracking task used in the previous evaluation. However, in this experiments we include the presence of a dynamic obstacle, specifically a filled <measure type="value"><num>1</num>-<measure type="VOLUME" unit="l">liter</measure></measure> bottle of water. For classical controllers, when an obstruction occur, the rigid body inverse dynamics does not account for this variation. As a result, the tracking error increases and with it also the contribution of the PD feedback controller increases to compensate for this tracking error. In this scenario, we demonstrate that using a learned contact model improves the tracking accuracy when unforeseen and dynamic obstacles are encountered along the path.</p>
		<p>We first performed the tracking experiment (with the obstacle) once using as controller the PD + ID, in order to collect training data. Using these data collected, we trained the contact model using as target the difference between the desired torque and the inverse dynamics model contribution τ ID (we here assume a single contact model). Following, we repeated the experiment comparing the full controller PD + ID + CM, the simple PD, and PD + ID. In Table II are collected the tracking errors for the <measure type="value"><num>three</num></measure> control schema and for all the <measure type="value"><num>four</num></measure> joint, averaged over <measure type="value"><num>20</num></measure> repetitions. The presence of the contact model proved beneficial in terms of tracking error for <measure type="value"><num>three out of four</num></measure> joints. For the elbow, the PD +ID performed slightly better. However, it is important to notice that the joints that are most involved in the trajectory are the shoulder pitch and shoulder jaw. In Figure 6 is shows the average tracking error (for the shoulder jaw) for the considered control modes. It is clearly visible that after about <measure type="value"><num>1</num> <measure type="TIME" unit="s">second</measure></measure> from the contact with the obstacle, the contact model reduce the tracking error. From these results we can conclude that using the additional learned contact model is beneficial. The profile of the average torque contributed by τ CM is shown in Figure 7.</p>
		<p>One limitation of the current results is that the gating network does not always recognize the presence of the contact. This is due to hardware limitations of the iCub skin. In fact, the current skin presents <measure type="value"><num>two</num></measure> main issues: 1) high levels of noise. Even without contacts, some sensors will occasionally fire as if in presence of strong forces applied. 2) Mechanical compliance of the skin. When applying a force, The sum of these <measure type="value"><num>two</num></measure> issues resulted in the introduction of delays for the identification of contacts and therefore the use of the additional contact model. This delay, which we estimate around <measure type="value"><num>500</num><measure type="TIME" unit="ms">ms</measure></measure> is visible in both Figure 6 and Figure 7. Often even for a human expert it is hard to distinguish between measurement noise and a real contact when observing short (i.e., less than <measure type="interval"><num atMost="100">100</num> <measure type="TIME" unit="ms">ms</measure></measure>) windows of data. A second issue we encountered during the training of both inverse dynamics model and contact models, is that the torques applied from the basic PD controller implemented on the iCub suffer from a high noise. As a result of this high degree of noise, we had to filter the desired torques. However, filtering the desired torques inevitably introduce small errors in the models learned. We expect that a smoother desired torques would result in a more accurate learned model and even lower tracking error.</p>
		<p>To analyze the generalization capabilities of a single contact model we experimented the use of obstacles not included in the training data. In a similar manner to the previous experiment we collected data using the PD + ID on <measure type="value"><num>two</num></measure> different obstacles: the <measure type="value"><num>1</num>-<measure type="VOLUME" unit="l">liter</measure></measure> bottle of water and a bin filled with <measure type="value"><num>2</num> <measure type="VOLUME" unit="l">liters</measure></measure> of water. Using the data collected from both these obstacles we trained the contact model. We tested the resulting learned model on a new obstacle: a bin filled with <measure type="value"><num>1.3</num> <measure type="VOLUME" unit="l">liters</measure></measure> of water. Table III report the average tracking error over <measure type="value"><num>25</num></measure> experiments. It can be noticed that for the <measure type="value"><num>two</num></measure> joints with the highest usage during the task (i.e., shoulder roll and jaw), the contact model considerably improve the tracking accuracy (respectively of <measure type="list"><num>2.5</num> <measure type="TEMPERATURE" unit="°">•</measure> and <num>1.8</num> <measure type="TEMPERATURE" unit="°">•</measure></measure> ). A visualization of the tracking error for the shoulder roll is shown in Figure 8. However, for the other <measure type="value"><num>two</num></measure> joints we observed a small (&lt; <measure type="interval"><num atMost="0.25">0.25</num> <measure type="TEMPERATURE" unit="°">•</measure></measure> ) decrease of the tracking performance. Overall, these results suggest that the contact model is capable of some degree of generalization to novel obstacles with different properties (e.g., weight).</p>
		<p>In this paper, we experimentally evaluated on the humanoid robot iCub a data-driven approach for learning inverse dynamics models in presence of contacts. Our proposed solution enables a fast and accurate prediction of the joint torques in situations when the robot is in contact with obstacles, trough the use of the tactile skin.</p>
		<p>We demonstrate on a pushing task that our learned model substantially improve the tracking performance in presence of unknown obstacles. The estimation from the learned model does not rely on dynamic parameters, but it is completely data-driven: uncalibrated tactile sensors provide raw information about the contact, while force/torque sensors provide information about the wrenches perceived by the robotic structure. As a result, our approach does not require a spatially calibrated model of the skin. We believe that this feature is particularly relevant with the increasing availability of miniaturized skin sensors. For future robot skin, composed of <measure type="list"><num>thousands</num> or <num>millions</num></measure> of sensors, it would be extremely challenging and time consuming to perform a full spatial calibration. Our approach is a first step toward the use of learning methods to alleviate this problem.</p>
	</text>
</tei>